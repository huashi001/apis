<?php

/**
 * Created by PhpStorm.
 * User: zy
 * Date: 2016/5/31 0031
 * Time: 下午 7:25
 */
namespace Cilibs\UCenter\Model;

use Cilibs\Account\AccountI;
use Cilibs\UCenter\Config;
use Cilibs\UCenter\D;

class UserInfoModel extends BaseModel
{
    private $file_path = '';
    private $upload_path = '';
    private $file_key = 'avatar';
    /**
     * @var ExpRuleModel
     */
    private $exp_rule_model;
    /**
     * @var UserJifenModel
     */
    private $user_jifen_model;
    /**
     * @var ActionModel
     */
    private $action_model;

    /**
     * @param $appkey
     * @return UserInfoModel
     */
    public static function getIns($appkey)
    {
        return parent::getIns($appkey); // TODO: Change the autogenerated stub
    }

    public function __construct($appkey)
    {
        parent::__construct($appkey);
        $this->file_path = dirname(APP_VIEW_ROOT) . '/webroot/upload/avatars/';
        $url = 'http://' . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI'];
        $url_arr = explode('main.php', $url);

        $this->upload_path = $url_arr[0] . 'upload';
        $this->db = D::B($this->get_table_name('user_infos'));
        $this->exp_rule_model = ExpRuleModel::getIns($appkey);
        $this->user_jifen_model = UserJifenModel::getIns($appkey);
        $this->action_model = ActionModel::getIns($appkey);
    }

    /**
     * 注册用户
     *
     * @param      $account_id
     * @param null $nickname
     * @param null $avatar_url
     *
     * @return array
     * @throws \Exception
     */
    public function doReigsterUser($account_id, $nickname = null, $avatar_url = null, $email = null, $idcard = null, $address = null, $introduce = null)
    {
        $app_settings = $this->common_model->get_app_setting();
        $nickname_prefix = '';

        if (isset($app_settings['nickname_prefix'])) {
            $nickname_prefix = $app_settings['nickname_prefix'];
        }

        if ($nickname === null) {
            $nickname = $this->random_nickname($nickname_prefix);
        }

        if (!$this->nickname_valid($nickname)) {
            $this->_exception($this->error->INVALID_NICKNAME_FORMAT);
        }

        if ($user = $this->verifyUser($account_id)) {
            $this->_exception($this->error->REGISTERED_ACCOUNT_ID);
        }

        if(!$address) {
            $address = '';
        }

        if(!$idcard) {
            $idcard = '';
        }

        if(!$introduce) {
            $introduce = '';
        }

        if($email) {
            if(!$this->email_valid($email)) {
                $this->_exception($this->error->INVALID_EMAIL);
            }
        }else{
            $email = '';
        }


        $arr = array(
            'account_id' => $account_id,
            'nickname' => $nickname,
            'avatar_url' => $avatar_url ? $avatar_url : '',
            'email' => $email,
            'address' => $address,
            'idcard' => $idcard,
            'introduce' => $introduce
        );

        if ($arr['avatar_url'] == '' && isset($app_settings['default_avatar'])) {
            $arr['avatar_url'] = $app_settings['default_avatar'];
        }

        $id = $this->db->insert($arr);
        if ($id <= 0) {
            $this->log($account_id, 'register user in UserInfoModel', "注册用户失败");
            $this->_exception($this->error->UNKOWN_ERROR);
        }

        return array('ret' => 1, 'id' => $id);
    }

    /**
     * 手机号密码创建用户
     *
     * @param $phone
     * @param $password
     * @param $user_info
     *
     * @return array
     * @throws \Exception
     */
    public function doCreateByPhone($phone, $password, $user_info)
    {
        $res = AccountI::doAdminRegisterPhone($this->appkey, $phone, $password);

        if ($res['ret'] != 1) {
            $this->_exception($this->error->CREATE_ACCOUNT_FAILED);
        }

        return $this->do_create($res, $user_info);
    }

    /**
     * 第三方创建用户
     *
     * @param $user_info
     *
     * @return array
     * @throws \Exception
     */
    public function doCreateThirdApp($user_info)
    {
        if (!isset($user_info['openid']) || !isset($user_info['nickname'])) {
            $this->_exception($this->error->EMPTY_REQUIRED_PARAMTER);
        }

        $res = AccountI::doLoginThirdAppByUser($this->appkey, $user_info['openid'], $user_info['nickname']);
        if ($res['ret'] != 1) {
            $this->_exception($this->error->CREATE_ACCOUNT_FAILED);
        }

        return $this->do_create($res, $user_info);
    }

    /**
     * 通过条件获取用户信息
     *
     * @param int  $page
     * @param int  $limit
     * @param null $condition
     * @param null $order
     *
     * @return array
     */
    public function doFetchUsers($page = 1, $limit = 10, $condition = null, $order = null)
    {
        if (!$condition) {
            $condition = '1';
        }

        return $this->get_users($page, $limit, $condition, $order);
    }

    /**
     * 通过第三方账户的id获取用户信息
     *
     * @param $openids
     *
     * @return array
     */
    public function doFetchUserByOpenIds($openids)
    {
        $account_ids = AccountI::getAccountidsByOpenids($this->appkey, $openids, 'third_app');

        if (empty($account_ids)) {
            $this->_exception($this->error->NO_USER_INFO);
        }

        $openids = array();
        foreach ($account_ids as $openid => $account_id) {
            $openids[$account_id] = $openid;
        }

        $back_info = array();
        $data = $this->get_users_by_accountids($account_ids);
        foreach ($data as $account_id => $user) {
            if (isset($openids[$account_id])) {
                $back_info[$openids[$account_id]] = $user;
            }
        }

        return array(
            'ret' => 1,
            'data' => $back_info,
        );
    }

    /**
     * 通过账户的id获取用户信息
     *
     * @param $openids
     *
     * @return array
     */
    public function doFetchUserByAccountIds($account_ids)
    {
        return array(
            'ret' => 1,
            'data' => $this->get_users_by_accountids($account_ids),
        );
    }

    /**
     * 通过昵称搜索用户
     * @param $name
     * @return array
     */
    public function doFetchUsersByName($name)
    {
        if(empty($name)) {
            return array(
                'ret' => 1,
                'data' => array()
            );
        }

        $users = $this->db->getAllByPage(1, 1000, "`nickname` LIKE '{$name}%'");
        return array(
            'ret' => 1,
            'data' => $users,
        );
    }

    /**
     * 获取符合条件的所有数量
     *
     * @param null $condition
     *
     * @return mixed
     */
    public function doGetTotal($condition = null)
    {
        if (!$condition) {
            $condition = '1';
        }

        return $this->db->getNum($condition);
    }

    /**
     * 通过第三方id更新
     *
     * @param $open_id
     * @param $update_params
     *
     * @return array
     * @throws \Exception
     */
    public function doUpdateByOpenId($open_id, $update_params)
    {
        $account_ids = AccountI::getAccountidsByOpenids($this->appkey, $open_id, 'third_app');
        if (!empty($account_ids)) {
            foreach ($account_ids as $id) {
                $account_id = $id;
                break;
            }
        } else {
            $this->_exception($this->error->NO_USER_INFO);
        }

        return $this->doUpdateUser($account_id, $update_params);
    }

    /**
     * 通过用户id更新
     *
     * @param $user_id
     * @param $update_params
     *
     * @return array
     * @throws \Exception
     */
    public function doUpdateByUserId($user_id, $update_params)
    {
        $user = $this->db->getby_id($user_id);

        if (!$user) {
            $this->_exception($this->error->NO_USER_INFO);
        }

        return $this->doUpdateUser($user['account_id'], $update_params);
    }

    /**
     * 通过account_id更新用户信息
     *
     * @param $account_id
     * @param $update_params
     *
     * @return array
     * @throws \Exception
     */
    public function doUpdateUser($account_id, $user_info)
    {
        if (!($user = $this->verifyUser($account_id))) {
            $this->_exception($this->error->NO_USER_INFO);
        }

        $update_arr = array();
        $this->filter_user_info($account_id, $user_info, $update_arr);
        $update_arr['updated_at'] = date('Y-m-d H:i:s');

        $updated = $this->db->update(array(
            'account_id' => $account_id,
        ), $update_arr);

        if (!$updated) {
            $this->log($account_id, 'user_info', 'update user_info error');
        }

        $this->action($account_id, $update_arr, $user);

        return array(
            'ret' => 1,
            'update_arr' => $update_arr,
        );
    }

    /**
     * 加经验
     *
     * @param $account_id
     * @param $num
     *
     * @return array|void
     * @throws \Exception
     */
    public function doAddExp($account_id, $num)
    {
        if ($num < 0) {
            $this->_exception($this->error->INVALID_ADD_NUM);
        }

        if (!($user_info = $this->verifyUser($account_id))) {
            $this->_exception($this->error->NO_USER_INFO);
        }

        $max = $this->exp_rule_model->getMaxExp();
        if ($user_info['exp'] >= $max) {
            return array('ret' => 1);
        }

        $sum = $user_info['exp'] + $num;
        if ($sum > $max) {
            $sum = $max;
        }

        $updated = $this->db->update(array(
            'account_id' => $account_id,
        ), array(
            'exp' => $sum,
        ));

        if (!$updated) {
            $this->log($account_id, 'doAddExp @UserInfoModel', 'update error num:' . $num);
            $this->_exception($this->error->UNKOWN_ERROR);
        }

        return array('ret' => 1);
    }

    /**
     * 判断用户是否存在
     *
     * @param $account_id
     *
     * @return bool
     */
    public function verifyUser($account_id)
    {
        $user = $this->db->getby(array(
            'account_id' => $account_id,
        ));

        if (empty($user)) {
            return false;
        }

        return $user;
    }

    /**
     * 判断手机号是否被注册
     *
     * @param $phone
     */
    public function phoneRegistered($phone)
    {
        if (!$this->phone_valid($phone)) {
            $this->_exception($this->error->INVALID_PHONE_FORMAT);
        }

        $user = $this->db->getby(array(
            'phone' => $phone,
        ));

        if (empty($user)) {
            return false;
        }

        return $user;
    }

    public function getByAccountId($account_id)
    {
        $user = $this->db->getby_account_id($account_id);
        if (!$user) {
            return null;
        }

        return $this->package_user($user);
    }

    public function getById($id)
    {
        return $this->db->getby_id($id);
    }

    public function file_key()
    {
        return $this->file_key;
    }

    private function do_create($account_info, $user_info)
    {
        $account_id = $account_info['account_id'];
        $arr = array('account_id' => $account_id);

        $this->filter_user_info($account_id, $user_info, $arr);
        $id = $this->db->insert($arr);

        if ($id <= 0) {
            $this->log($account_id, 'do_create in UserInfoModel', "创建用户失败");
            $this->_exception($this->error->UNKOWN_ERROR);
        }

        return array(
            'ret' => 1,
            'account_id' => $account_id,
            'token' => $account_info['token'],
        );
    }

    private function filter_user_info($account_id, $user_info, &$arr)
    {
        $params = array('nickname', 'avatar', 'gender', 'birth', 'city_code', 'extra', 'idcard', 'address', 'email', 'introduce');

        foreach ($params as $param) {
            //头像更新
            if ($param == 'avatar') {
                if (isset($_FILES[$this->file_key])) {
                    $this->save_avatar($account_id, $arr);
                }
                if (isset($user_info['avatar'])) {
                    $arr['avatar_url'] = $user_info['avatar'];
                }
            } //其他信息更新
            else {
                if (isset($user_info[$param])) {
                    $value = $user_info[$param];
                    $this->check_valid($param, $value);
                    $arr[$param] = $value;
                }
            }
        }

        if (count($arr) == 0) {
            $this->_exception($this->error->EMPTY_REQUIRED_PARAMTER);
        }
    }

    private function check_valid($param, $value)
    {
        if ($param == 'nickname' && !$this->nickname_valid($value)) {
            $this->_exception($this->error->INVALID_NICKNAME_FORMAT);
        }

        if ($param == 'gender' && !$this->gender_valid($value)) {
            $this->_exception($this->error->INVALID_GENDER_FORMAT);
        }

        if ($param == 'birth' && !$this->date_valid($value)) {
            $this->_exception($this->error->INVALID_BIRTH_FORMAT);
        }

        if ($param == 'city_code' && !$this->areacode_valid($value)) {
            $this->_exception($this->error->INVALID_AREA_CODE);
        }
    }

    private function get_users($page = 1, $limit = 10, $condition, $order = null)
    {
        $order_str = '';
        if ($order) {
            if (is_array($order)) {
                foreach ($order as $key => $value) {
                    $table_name = $this->get_table_name('user_infos');
                    echo $table_name;
                    die();
                    $columns = $this->db->query(
                        "select name from syscolumns where id=object_id({$table_name})"
                    );

                    if (in_array($key, $columns)) {
                        if (!in_array($value, array(
                            'desc',
                            'asc',
                            'DESC',
                            'ASC',
                        ))
                        ) {
                            $value = 'ASC';
                        }

                        if ($order == '') {
                            $order_str += " {$key} {$value}";
                        } else {
                            $order_str += ", {$key} {$value}";
                        }
                    }
                }
            } elseif (is_string($order)) {
                $order_str = $order;
            }
        }

        if ($order_str != '') {
            $order_str = 'ORDER BY' . $order_str;
        }

        $users = $this->db->getAllByPage($page, $limit, $condition, $order_str);
        $back_info = array();

        if (empty($users)) {
            return $back_info;
        }

        foreach ($users as $user) {
            $back_info[] = $this->package_user($user);
        }

        return $back_info;
    }

    private function get_users_by_accountids($account_ids, $page = 1, $limit = 1000)
    {
        //支持json_encode后的字符串
        if (is_string($account_ids) && is_array(json_decode($account_ids, true))) {
            $account_ids = json_decode($account_ids, true);
        }

        if (is_array($account_ids)) {
            $back_info = array();

            $users = $this->db->getAllByPage($page, $limit, array(
                'account_id' => $account_ids,
            ));

            if (empty($users)) {
                return $back_info;
            }

            foreach ($users as $user) {
                $back_info[$user['account_id']] = $this->package_user($user);
            }

            return $back_info;
        } else {
            if (!($user = $this->verifyUser($account_ids))) {
                $this->_exception($this->error->NO_USER_INFO);
            }

            return $this->package_user($user);
        }
    }

    private function package_user($user)
    {
        $address = $this->code_to_city($user['city_code']);
        $avatar_url = '';

        if ($user['avatar_url'] && $user['avatar_url'] != '') {
            if (substr($user['avatar_url'], 0, 8) == '/avatars') {//存本地的
                $avatar_url = $this->upload_path . $user['avatar_url'];
            } else {//直接第三方的
                $avatar_url = $user['avatar_url'];
            }
        }

        return array(
            'id' => $user['id'],
            'nickname' => $user['nickname'],
            'avatar_url' => $avatar_url,
            'gender' => $user['gender'],
            'birth' => $user['birth'],
            'province' => $address['province'],
            'city' => $address['city'],
            'level' => $this->user_level($user['account_id']),
            'jifen_info' => $this->jifen_info($user['account_id']),
            'address' => $user['address'],
            'email' => $user['email'],
            'idcard' => $user['idcard'],
            'introduce' => $user['introduce'],
            'extra' => $user['extra'],
            'account_id' => $user['account_id'],
            'city_code' => $user['city_code'],
        );
    }

    private function save_avatar($account_id, &$update_arr)
    {
        $file_name = $account_id . '_' . time() . '_' . random_string()
            . '.' . $this->get_file_type($_FILES [$this->file_key] ['name']);

        $detail_path = $this->get_detail_path();

        if (move_uploaded_file($_FILES [$this->file_key] ['tmp_name'],
            $this->file_path . $detail_path . $file_name)) {
            $upload_res = \Cilibs\UploadPic\UploadPicI::upload($this->file_path . $detail_path . $file_name);

            if ($upload_res['ret'] == 1) {//图片服务上传成功存图片服务地址
                $update_arr['avatar_url'] = $upload_res['data']['url'];
            } else {//失败存本地服务器
                $update_arr['avatar_url'] = '/avatars/' . $detail_path . $file_name;
            }
        } else {
            $this->_exception($this->error->INVALID_AVATAR_FILE);
        }
    }

    //触发某种操作
    private function action($account_id, $update_arr, $user)
    {
        if ($update_arr['nickname'] && $update_arr['nickname'] != $user['nickname']) {
            $this->action_model->doAction($account_id, ActionModel::MODIFY_NICKNAME);
        }

        if ($update_arr['gender'] && $update_arr['gender'] != $user['gender']) {
            $this->action_model->doAction($account_id, ActionModel::MODIFY_GENDER);
        }

        if ($update_arr['avatar_url'] && $update_arr['avatar_url'] != $user['avatar_url']) {
            $this->action_model->doAction($account_id, ActionModel::MODIFY_AVATAR);
        }

        if ($update_arr['birthday'] && $update_arr['birthday'] != $user['birthday']) {
            $this->action_model->doAction($account_id, ActionModel::MODIFY_BIRTHDAY);
        }
    }

    /**
     * 获取用户积分信息
     */
    private function jifen_info($account_id)
    {
        $back_info = array();
        $user_jifens = $this->user_jifen_model->getUserJifens($account_id);

        if (empty($user_jifens)) {

            if (!($jifen = $this->user_jifen_model->initDefaultJifen($account_id))) {
                $this->log($account_id, 'jifen_info @ UserInfoModel', '初始化默认积分失败');

                return $back_info;
            }

            $back_info[$jifen['jifen_id']] = $this->pakage_jifen($jifen);

            return $back_info;
        }

        foreach ($user_jifens as $jifen) {
            $back_info[$jifen['jifen_id']] = $this->pakage_jifen($jifen);
        }

        return $back_info;
    }

    /**
     * 获取用户等级
     * @return int
     */
    private function user_level($account_id)
    {
        $user_info = $this->db->getby(array(
            'account_id' => $account_id,
        ));

        if (empty($user_info)) {
            return 1;
        }

        return $this->exp_rule_model->expToLevel($user_info['exp']);
    }

    private function pakage_jifen($jifen)
    {
        return array(
            'id' => (int)$jifen['jifen_id'],
            'value' => (int)$jifen['value'],
        );
    }

    private function get_detail_path()
    {
        if (!is_dir(dirname(APP_VIEW_ROOT) . '/webroot/upload')) {
            mkdir(dirname(APP_VIEW_ROOT) . '/webroot/upload', 0775);
        }

        if (!is_dir(dirname(APP_VIEW_ROOT) . '/webroot/upload/avatars')) {
            mkdir(dirname(APP_VIEW_ROOT) . '/webroot/upload/avatars', 0775);
        }

        $paths = array(
            $this->file_path,
            date('Y'),
            '/' . date('m'),
            '/' . date('d'),
        );

        $path = '';
        for ($i = 0; $i < count($paths); $i++) {
            $path .= $paths[$i];
            if (!is_dir($path)) {
                mkdir($path, 0775);
            }
        }

        return date('Y') . '/' . date('m') . '/' . date('d') . '/';
    }

    private function get_file_type($filename)
    {
        return substr($filename, strrpos($filename, '.') + 1);
    }

    private function random_nickname($prefix)
    {
        $num = rand(100000, 999999);

        return $prefix . $num;
    }
}
